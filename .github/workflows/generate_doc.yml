name: Generate Doc

on:
  # This workflow will be dispatched only by the doc generator API.
  workflow_dispatch:
    inputs:
      # This is what we'll save the blob as. Providing a guid is probably the easiest option here.
      docId:
        description: "A unique identifier for the generated doc; ideally a guid"
        required: true
      # Pandoc requires that the input files be provided a single space-delimited string.
      # For simplicity's sake, we'll put that burden on the caller -- our doc generator API.
      docList:
        description: "A space-delimited ordered list of the MD files to be included in the generated doc"
        required: true
      # Once the doc is generated, we'll push it up to Azure blob storage. Event grid will
      # fire an event when the document lands that includes this additional metadata. We'll use
      # this metadata to further process the generated doc (send it to a list of email recipients, etc.) 
      # so we don't have to persist it somewhere else.
      docMetadata:
        description: "Metadata that will be appended to the generated doc in blob storage."
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repo...
      - uses: actions/checkout@v3
        name: Check out repo
          
      # Let's build a doc...
      - uses: docker://pandoc/latex:2.9
        name: Generate PDF
        env:
          DocList: ${{ github.event.inputs.docList }}
        with:
          args: >-
            --standalone 
            --output=output/result.pdf 
            ${{ env.DocList }}
            
      # Push the PDF up to blob storage with its associated metadata...
      - uses: Azure/CLI@v1
        name: Upload PDF to blob storage
        env:
          DocId: ${{ github.event.inputs.docId }}
          DocMetadata: ${{ github.event.inputs.docMetadata }}
          StorageConnectionString: ${{ secrets.AZURE_BLOB_CONNECTION_STRING }}
        with:
          inlineScript: |
            az storage blob upload \
              --connection-string "${{ env.StorageConnectionString }}" \
              --container-name "pdfs" \
              --file "output/result.pdf" \
              --metadata docMetadata="${{ env.DocMetadata }}" \
              --name "${{ env.DocId }}.pdf"
            
